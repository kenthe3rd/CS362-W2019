Testing village
randomtestcard2.c
Playing 10000 games where Village is the only card played
village played 47551 times
Cards in hand errors: 35287
Cards in deck errors: 1347
Discard pile errors: 37172
Other player state errors: 127
Supply state errors: 0
Action errors: 0
File 'dominion.c'
Lines executed:45.88% of 558
Branches executed:41.49% of 417
Taken at least once:33.81% of 417
Calls executed:33.68% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 15705911 returned 100% blocks executed 100%
 15705911:    8:int compare(const void* a, const void* b) {
 15705911:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
  7248806:   10:    return 1;
  8457105:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
  2364796:   12:    return -1;
  6092309:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 20303 returned 100% blocks executed 95%
    20303:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    20303:   44:  SelectStream(1);
call    0 returned 100%
    20303:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    20303:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    20303:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   223333:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
  2233330:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
  2030300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    20303:   73:  if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   74:    {
     6968:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    13335:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
     6620:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     6715:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    20303:   87:  if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   88:    {
     6968:   89:      state->supplyCount[estate] = 8;
     6968:   90:      state->supplyCount[duchy] = 8;
     6968:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    13335:   95:      state->supplyCount[estate] = 12;
    13335:   96:      state->supplyCount[duchy] = 12;
    13335:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    20303:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    20303:  102:  state->supplyCount[silver] = 40;
    20303:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   426363:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  3349995:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  3146965:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   203030:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
    81212:  115:		  if (numPlayers == 2){ 
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
    13936:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    26670:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   162424:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   203030:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  2943935:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    80959:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    60656:  140:      state->deckCount[i] = 0;
   242624:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
   181968:  143:	  state->deck[i][j] = estate;
   181968:  144:	  state->deckCount[i]++;
        -:  145:	}
   485248:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   424592:  148:	  state->deck[i][j] = copper;
   424592:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    80959:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
    60656:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    80959:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    60656:  166:      state->handCount[i] = 0;
    60656:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   568484:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   548181:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    20303:  182:  state->outpostPlayed = 0;
    20303:  183:  state->phase = 0;
    20303:  184:  state->numActions = 1;
    20303:  185:  state->numBuys = 1;
    20303:  186:  state->playedCardCount = 0;
    20303:  187:  state->whoseTurn = 0;
    20303:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   121818:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   101515:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
    20303:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
    20303:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 441661 returned 100% blocks executed 100%
   441661:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   441661:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   441661:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      707:  210:    return -1;
   440954:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  6839294:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
  5957386:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  5957386:  216:    newDeck[newDeckPos] = state->deck[player][card];
  5957386:  217:    newDeckPos++;
 26667219:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
 20709833:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  5957386:  221:    state->deckCount[player]--;
        -:  222:  }
  6398340:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
  5957386:  224:    state->deck[player][i] = newDeck[i];
  5957386:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   440954:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 68251 returned 100% blocks executed 73%
    68251:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    68251:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    68251:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    68251:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    68251:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
    68251:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    68251:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    68251:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    68251:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
    68251:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 979786 returned 100% blocks executed 93%
   979786:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
   979786:  280:  who = state->whoseTurn;
        -:  281:
   979786:  282:  if (state->numBuys < 1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
     5134:  285:    return -1;
   974652:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       23:  289:    return -1;
   974629:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
   974629:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
   974629:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
   974629:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
   974629:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
   974629:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 12057775 returned 100% blocks executed 100%
 12057775:  311:int numHandCards(struct gameState *state) {
 12057775:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 10101612 returned 100% blocks executed 100%
 10101612:  315:int handCard(int handPos, struct gameState *state) {
 10101612:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
 10101612:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1949281 returned 100% blocks executed 100%
  1949281:  320:int supplyCount(int card, struct gameState *state) {
  1949281:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 24465632 returned 100% blocks executed 100%
 24465632:  346:int whoseTurn(struct gameState *state) {
 24465632:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 1022210 returned 100% blocks executed 100%
  1022210:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
  1022210:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
  6191360:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  5169150:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  5169150:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
  1022210:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
  1022210:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
   681195:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
   341015:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
  1022210:  370:  state->outpostPlayed = 0;
  1022210:  371:  state->phase = 0;
  1022210:  372:  state->numActions = 1;
  1022210:  373:  state->coins = 0;
  1022210:  374:  state->numBuys = 1;
  1022210:  375:  state->playedCardCount = 0;
  1022210:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
  6133260:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  5111050:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
  1022210:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
  1022210:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 1052507 returned 100% blocks executed 100%
  1052507:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
  1052507:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
    20301:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
  1032206:  401:  j = 0;
 26837356:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
 25805150:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  405:	{
    50072:  406:	  j++;
        -:  407:	}
        -:  408:    }
  1032206:  409:  if ( j >= 3)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  410:    {
    10000:  411:      return 1;
        -:  412:    }
        -:  413:
  1022206:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5342417 returned 100% blocks executed 100%
  5342417:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  5342417:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  5731831:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
  5350826:  534:      state->deck[player][i] = state->discard[player][i];
  5350826:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
   381005:  538:    state->deckCount[player] = state->discardCount[player];
   381005:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
   381005:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
   381005:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
   381005:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
   381005:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
   381005:  559:    if (deckCounter == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      707:  560:      return -1;
        -:  561:
   380298:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
   380298:  563:    state->deckCount[player]--;
   380298:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  4961412:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  4961412:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  4961412:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  4961412:  576:    state->deckCount[player]--;
  4961412:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  5341710:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 1949285 returned 100% blocks executed 97%
  1949285:  583:int getCost(int cardNumber)
        -:  584:{
  1949285:  585:  switch( cardNumber ) 
branch  0 taken 1%
branch  1 taken 1%
branch  2 taken 1%
branch  3 taken 22%
branch  4 taken 1%
branch  5 taken 42%
branch  6 taken 32%
branch  7 taken 1%
branch  8 taken 1%
branch  9 taken 1%
branch 10 taken 1%
branch 11 taken 1%
branch 12 taken 1%
branch 13 taken 2%
branch 14 taken 2%
branch 15 taken 1%
branch 16 taken 1%
branch 17 taken 1%
branch 18 taken 1%
branch 19 taken 1%
branch 20 taken 1%
branch 21 taken 1%
branch 22 taken 1%
branch 23 taken 1%
branch 24 taken 1%
branch 25 taken 1%
branch 26 taken 1%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
   431473:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
   822459:  598:      return 3;
        -:  599:    case gold:
   614129:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
      401:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
    40401:  614:      return 4;
        -:  615:    case village:
    40401:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function play_adventurer called 0 returned 0% blocks executed 0%
    #####:  646:int play_adventurer(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[],int z) {
        -:  647:	int cardDrawn;
    #####:  648:	while (drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  649:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  650:			shuffle(currentPlayer, state);
call    0 never executed
        -:  651:		}
    #####:  652:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  654:		if (cardDrawn == copper && cardDrawn == silver && cardDrawn == gold)        // Error: instead of OR using and condition this will never evaluate to true.  
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  655:			drawntreasure++;
        -:  656:		else {
    #####:  657:			temphand[z] = cardDrawn;
    #####:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:			z++;
        -:  660:		}
        -:  661:	}
    #####:  662:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  664:		z = z - 1;
        -:  665:	}
    #####:  666:	return 0;
        -:  667:}
        -:  668:
        -:  669:
function play_smithy called 20200 returned 100% blocks executed 100%
    20200:  670:int play_smithy( int currentPlayer, struct gameState *state, int handPos) {
        -:  671:	//+3 Cards
   101000:  672:	for (int i = 0; i <= 3; i++)         // Error: Instead of 3 we are drawing 4 cards  due to <= condition.
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  673:	{
    80800:  674:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  675:	}
        -:  676:
        -:  677:	//discard card from hand
    20200:  678:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
    20200:  679:	return 0;
        -:  680:}
        -:  681:
function play_village called 47851 returned 100% blocks executed 100%
    47851:  682:int play_village(int currentPlayer, struct gameState *state,int handPos) {
        -:  683:	//+1 Card
    47851:  684:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  685:
        -:  686:	//+2 Actions
    47851:  687:	state->numActions = state->numActions + 2;
        -:  688:
        -:  689:	//discard played card from hand
    47851:  690:	discardCard(currentPlayer,handPos, state, 0); // Error: Both currentPlayer and handPos are of type integer it will cause problem during run-time.
call    0 returned 100%
    47851:  691:	return 0;
        -:  692:}
        -:  693:
function play_remodel called 0 returned 0% blocks executed 0%
    #####:  694:int play_remodel(int currentPlayer,  struct gameState *state , int handPos, int choice1, int choice2) {
    #####:  695:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  696:
    #####:  697:	if ((getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2)) // Error: > sign is replaced by < . It will cause incorrect behaviour.
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:		return -1;
        -:  700:	}
        -:  701:
    #####:  702:	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  703:
        -:  704:	//discard card from hand
    #####:  705:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  706:
        -:  707:	//discard trashed card
    #####:  708:	for (int i = 0; i <= state->handCount[currentPlayer]; i++)        //  Error: Invalid bounds i should be < instead of <= it will cause segmentation faults.
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:		{
    #####:  712:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  713:			break;
        -:  714:		}
        -:  715:	}
        -:  716:
        -:  717:
    #####:  718:	return 0;
        -:  719:
        -:  720:}
        -:  721:
function play_councilroom called 200 returned 100% blocks executed 100%
      200:  722:int play_councilroom(int currentPlayer, struct gameState *state,int handPos) {
        -:  723:	//+4 Cards
     1000:  724:	for (int i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  725:	{
      800:  726:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  727:	}
        -:  728:
        -:  729:	//+1 Buy
      200:  730:	state->numBuys++;
        -:  731:
        -:  732:	//Each other player draws a card
      800:  733:	for (int i = 0; i <= state->numPlayers; i++)       // Error: <= used instead of <. incorrect bounds it can cause segmentation fault.
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  734:	{
      600:  735:		if (i != currentPlayer)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  736:		{
      400:  737:			drawCard(i, state);
call    0 returned 100%
        -:  738:		}
        -:  739:	}
        -:  740:
        -:  741:	//put played card in played card pile
      200:  742:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  743:
      200:  744:	return 0;
        -:  745:}
        -:  746:
function cardEffect called 68251 returned 100% blocks executed 4%
    68251:  747:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  748:{
        -:  749:  int i;
        -:  750:  int j;
        -:  751:  int k;
        -:  752:  int x;
        -:  753:  int index;
    68251:  754:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    68251:  755:  int nextPlayer = currentPlayer + 1;
        -:  756:
    68251:  757:  int tributeRevealedCards[2] = {-1, -1};
        -:  758:  int temphand[MAX_HAND];// moved above the if statement
    68251:  759:  int drawntreasure=0;
        -:  760:  //int cardDrawn;
    68251:  761:  int z = 0;// this is the counter for the temp hand
    68251:  762:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
    14613:  763:    nextPlayer = 0;
        -:  764:  }
        -:  765:  
        -:  766:  
        -:  767:  
        -:  768:	
        -:  769:  //uses switch to select card and perform actions
    68251:  770:  switch( card ) 
branch  0 taken 0%
branch  1 taken 1%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 30%
branch  7 taken 70%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  771:    {
        -:  772:    case adventurer:
        -:  773:      // call adventurer function here.
        -:  774:		
    #####:  775:		return play_adventurer(currentPlayer, state, drawntreasure, temphand, z);
call    0 never executed
        -:  776:
        -:  777:    case council_room:
      200:  778:		return play_councilroom(currentPlayer, state, handPos);
call    0 returned 100%
        -:  779:			
        -:  780:    case feast:
        -:  781:      //gain card with cost up to 5
        -:  782:      //Backup hand
    #####:  783:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  784:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  785:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  786:      }
        -:  787:      //Backup hand
        -:  788:
        -:  789:      //Update Coins for Buy
    #####:  790:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  791:      x = 1;//Condition to loop on
    #####:  792:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  793:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  794:	  if (DEBUG)
        -:  795:	    printf("None of that card left, sorry!\n");
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  799:	  }
        -:  800:	}
    #####:  801:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  802:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  806:	  }
        -:  807:	}
        -:  808:	else{
        -:  809:
        -:  810:	  if (DEBUG){
        -:  811:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  812:	  }
        -:  813:
    #####:  814:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  815:	  x = 0;//No more buying cards
        -:  816:
        -:  817:	  if (DEBUG){
        -:  818:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  819:	  }
        -:  820:
        -:  821:	}
        -:  822:      }     
        -:  823:
        -:  824:      //Reset Hand
    #####:  825:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  826:	state->hand[currentPlayer][i] = temphand[i];
    #####:  827:	temphand[i] = -1;
        -:  828:      }
        -:  829:      //Reset Hand
        -:  830:      			
    #####:  831:      return 0;
        -:  832:			
        -:  833:    case gardens:
    #####:  834:      return -1;
        -:  835:			
        -:  836:    case mine:
    #####:  837:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  838:
    #####:  839:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:		
    #####:  844:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  855:
        -:  856:      //discard card from hand
    #####:  857:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  858:
        -:  859:      //discard trashed card
    #####:  860:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  863:	    {
    #####:  864:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  865:	      break;
        -:  866:	    }
        -:  867:	}
        -:  868:			
    #####:  869:      return 0;
        -:  870:			
        -:  871:    case remodel:
        -:  872:		// call play_remodel function here.
    #####:  873:		return play_remodel(currentPlayer, state, handPos, choice1, choice2);
call    0 never executed
        -:  874:
        -:  875:    case smithy:
        -:  876:		// call play_smithy function here.
    20200:  877:		return play_smithy(currentPlayer, state, handPos);
call    0 returned 100%
        -:  878:		
        -:  879:    case village:
        -:  880:		// call play_village function here.
    47851:  881:		return play_village(currentPlayer, state, handPos);
call    0 returned 100%
        -:  882:		
        -:  883:		
        -:  884:    case baron:
    #####:  885:      state->numBuys++;//Increase buys by 1!
    #####:  886:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  887:	int p = 0;//Iterator for hand!
    #####:  888:	int card_not_discarded = 1;//Flag for discard set!
    #####:  889:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  890:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  891:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  892:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  893:	    state->discardCount[currentPlayer]++;
    #####:  894:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  895:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  896:	    }
    #####:  897:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  898:	    state->handCount[currentPlayer]--;
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
    #####:  901:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  902:	    if(DEBUG) {
        -:  903:	      printf("No estate cards in your hand, invalid choice\n");
        -:  904:	      printf("Must gain an estate if there are any\n");
        -:  905:	    }
    #####:  906:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  907:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  908:	      state->supplyCount[estate]--;//Decrement estates
    #####:  909:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  910:		isGameOver(state);
call    0 never executed
        -:  911:	      }
        -:  912:	    }
    #####:  913:	    card_not_discarded = 0;//Exit the loop
        -:  914:	  }
        -:  915:			    
        -:  916:	  else{
    #####:  917:	    p++;//Next card
        -:  918:	  }
        -:  919:	}
        -:  920:      }
        -:  921:			    
        -:  922:      else{
    #####:  923:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  925:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  926:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:	    isGameOver(state);
call    0 never executed
        -:  928:	  }
        -:  929:	}
        -:  930:      }
        -:  931:	    
        -:  932:      
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case great_hall:
        -:  936:      //+1 Card
    #####:  937:      drawCard(currentPlayer, state);
call    0 never executed
        -:  938:			
        -:  939:      //+1 Actions
    #####:  940:      state->numActions++;
        -:  941:			
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  987:			{
    #####:  988:			  drawCard(i, state);
call    0 never executed
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1002:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
        -: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1070:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
        -: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1154:			{
        -: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1215:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1216:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1217:	  state->discardCount[i]++;
    #####: 1218:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1219:	}
        -: 1220:      }
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
function discardCard called 68253 returned 100% blocks executed 100%
    68253: 1257:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1258:{
        -: 1259:	
        -: 1260:  //if card is not trashed, added to Played pile 
    68253: 1261:  if (trashFlag < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1262:    {
        -: 1263:      //add card to played pile
    68251: 1264:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    68251: 1265:      state->playedCardCount++;
        -: 1266:    }
        -: 1267:	
        -: 1268:  //set played card to -1
    68253: 1269:  state->hand[currentPlayer][handPos] = -1;
        -: 1270:	
        -: 1271:  //remove card from player's hand
    68253: 1272:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1273:    {
        -: 1274:      //reduce number of cards in hand
      981: 1275:      state->handCount[currentPlayer]--;
        -: 1276:    }
    67272: 1277:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
      874: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:  else 	
        -: 1283:    {
        -: 1284:      //replace discarded card with last card in hand
    66398: 1285:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1286:      //set last card to -1
    66398: 1287:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1288:      //reduce number of cards in hand
    66398: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:	
    68253: 1292:  return 0;
        -: 1293:}
        -: 1294:
function gainCard called 974629 returned 100% blocks executed 70%
   974629: 1295:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1296:{
        -: 1297:  //Note: supplyPos is enum of choosen card
        -: 1298:	
        -: 1299:  //check if supply pile is empty (0) or card is not used in game (-1)
   974629: 1300:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1301:    {
    #####: 1302:      return -1;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //added card for [whoseTurn] current player:
        -: 1306:  // toFlag = 0 : add to discard
        -: 1307:  // toFlag = 1 : add to deck
        -: 1308:  // toFlag = 2 : add to hand
        -: 1309:
   974629: 1310:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1311:    {
    #####: 1312:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1313:      state->deckCount[player]++;
        -: 1314:    }
   974629: 1315:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1316:    {
    #####: 1317:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1318:      state->handCount[player]++;
        -: 1319:    }
        -: 1320:  else
        -: 1321:    {
   974629: 1322:      state->discard[player][ state->discardCount[player] ] = supplyPos;
   974629: 1323:      state->discardCount[player]++;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //decrease number in supply pile
   974629: 1327:  state->supplyCount[supplyPos]--;
        -: 1328:	 
   974629: 1329:  return 0;
        -: 1330:}
        -: 1331:
function updateCoins called 1110764 returned 100% blocks executed 100%
  1110764: 1332:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1333:{
        -: 1334:  int i;
        -: 1335:	
        -: 1336:  //reset coin count
  1110764: 1337:  state->coins = 0;
        -: 1338:
        -: 1339:  //add coins for each Treasure card in player's hand
  6722662: 1340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1341:    {
  5611898: 1342:      if (state->hand[player][i] == copper)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -: 1343:	{
  2573951: 1344:	  state->coins += 1;
        -: 1345:	}
  3037947: 1346:      else if (state->hand[player][i] == silver)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -: 1347:	{
  1131193: 1348:	  state->coins += 2;
        -: 1349:	}
  1906754: 1350:      else if (state->hand[player][i] == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1351:	{
   485303: 1352:	  state->coins += 3;
        -: 1353:	}	
        -: 1354:    }	
        -: 1355:
        -: 1356:  //add bonus
  1110764: 1357:  state->coins += bonus;
        -: 1358:
  1110764: 1359:  return 0;
        -: 1360:}
        -: 1361:
        -: 1362:
        -: 1363://end of dominion.c
        -: 1364:
Testing village
randomtestcard2.c
Playing 10000 games where Village is the only card played
village played 47149 times
Cards in hand errors: 34920
Cards in deck errors: 1322
Discard pile errors: 36801
Other player state errors: 112
Supply state errors: 0
Action errors: 0
File 'dominion.c'
Lines executed:45.88% of 558
Branches executed:41.49% of 417
Taken at least once:33.81% of 417
Calls executed:33.68% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 15679743 returned 100% blocks executed 100%
 15679743:    8:int compare(const void* a, const void* b) {
 15679743:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
  7238422:   10:    return 1;
  8441321:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
  2361934:   12:    return -1;
  6079387:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 20303 returned 100% blocks executed 95%
    20303:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    20303:   44:  SelectStream(1);
call    0 returned 100%
    20303:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    20303:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    20303:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   223333:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
  2233330:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
  2030300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    20303:   73:  if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
     7056:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    13247:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
     6656:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     6591:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    20303:   87:  if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
     7056:   89:      state->supplyCount[estate] = 8;
     7056:   90:      state->supplyCount[duchy] = 8;
     7056:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    13247:   95:      state->supplyCount[estate] = 12;
    13247:   96:      state->supplyCount[duchy] = 12;
    13247:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    20303:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    20303:  102:  state->supplyCount[silver] = 40;
    20303:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   426363:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  3349995:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  3146965:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   203030:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
    81212:  115:		  if (numPlayers == 2){ 
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
    14112:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    26494:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   162424:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   203030:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  2943935:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    80747:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    60444:  140:      state->deckCount[i] = 0;
   241776:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
   181332:  143:	  state->deck[i][j] = estate;
   181332:  144:	  state->deckCount[i]++;
        -:  145:	}
   483552:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   423108:  148:	  state->deck[i][j] = copper;
   423108:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    80747:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
    60444:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    80747:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    60444:  166:      state->handCount[i] = 0;
    60444:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   568484:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   548181:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    20303:  182:  state->outpostPlayed = 0;
    20303:  183:  state->phase = 0;
    20303:  184:  state->numActions = 1;
    20303:  185:  state->numBuys = 1;
    20303:  186:  state->playedCardCount = 0;
    20303:  187:  state->whoseTurn = 0;
    20303:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   121818:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   101515:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
    20303:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
    20303:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 441286 returned 100% blocks executed 100%
   441286:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   441286:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   441286:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      842:  210:    return -1;
   440444:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  6828067:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
  5947179:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  5947179:  216:    newDeck[newDeckPos] = state->deck[player][card];
  5947179:  217:    newDeckPos++;
 26629003:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
 20681824:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  5947179:  221:    state->deckCount[player]--;
        -:  222:  }
  6387623:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
  5947179:  224:    state->deck[player][i] = newDeck[i];
  5947179:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   440444:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 67849 returned 100% blocks executed 73%
    67849:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    67849:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    67849:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    67849:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    67849:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
    67849:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    67849:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    67849:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    67849:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
    67849:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 976778 returned 100% blocks executed 93%
   976778:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
   976778:  280:  who = state->whoseTurn;
        -:  281:
   976778:  282:  if (state->numBuys < 1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
     4922:  285:    return -1;
   971856:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       15:  289:    return -1;
   971841:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
   971841:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
   971841:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
   971841:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
   971841:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
   971841:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 12031281 returned 100% blocks executed 100%
 12031281:  311:int numHandCards(struct gameState *state) {
 12031281:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 10079304 returned 100% blocks executed 100%
 10079304:  315:int handCard(int handPos, struct gameState *state) {
 10079304:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
 10079304:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1943697 returned 100% blocks executed 100%
  1943697:  320:int supplyCount(int card, struct gameState *state) {
  1943697:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 24410898 returned 100% blocks executed 100%
 24410898:  346:int whoseTurn(struct gameState *state) {
 24410898:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 1019916 returned 100% blocks executed 100%
  1019916:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
  1019916:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
  6177085:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  5157169:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  5157169:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
  1019916:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
  1019916:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
   678417:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
   341499:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
  1019916:  370:  state->outpostPlayed = 0;
  1019916:  371:  state->phase = 0;
  1019916:  372:  state->numActions = 1;
  1019916:  373:  state->coins = 0;
  1019916:  374:  state->numBuys = 1;
  1019916:  375:  state->playedCardCount = 0;
  1019916:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
  6119496:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  5099580:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
  1019916:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
  1019916:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 1050213 returned 100% blocks executed 100%
  1050213:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
  1050213:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
    20301:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
  1029912:  401:  j = 0;
 26777712:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
 25747800:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  405:	{
    50039:  406:	  j++;
        -:  407:	}
        -:  408:    }
  1029912:  409:  if ( j >= 3)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  410:    {
    10000:  411:      return 1;
        -:  412:    }
        -:  413:
  1019912:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5330545 returned 100% blocks executed 100%
  5330545:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  5330545:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  5723581:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
  5342739:  534:      state->deck[player][i] = state->discard[player][i];
  5342739:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
   380842:  538:    state->deckCount[player] = state->discardCount[player];
   380842:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
   380842:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
   380842:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
   380842:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
   380842:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
   380842:  559:    if (deckCounter == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      842:  560:      return -1;
        -:  561:
   380000:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
   380000:  563:    state->deckCount[player]--;
   380000:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  4949703:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  4949703:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  4949703:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  4949703:  576:    state->deckCount[player]--;
  4949703:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  5329703:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 1943709 returned 100% blocks executed 97%
  1943709:  583:int getCost(int cardNumber)
        -:  584:{
  1943709:  585:  switch( cardNumber ) 
branch  0 taken 1%
branch  1 taken 1%
branch  2 taken 1%
branch  3 taken 22%
branch  4 taken 1%
branch  5 taken 42%
branch  6 taken 32%
branch  7 taken 1%
branch  8 taken 1%
branch  9 taken 1%
branch 10 taken 1%
branch 11 taken 1%
branch 12 taken 1%
branch 13 taken 2%
branch 14 taken 2%
branch 15 taken 1%
branch 16 taken 1%
branch 17 taken 1%
branch 18 taken 1%
branch 19 taken 1%
branch 20 taken 1%
branch 21 taken 1%
branch 22 taken 1%
branch 23 taken 1%
branch 24 taken 1%
branch 25 taken 1%
branch 26 taken 1%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
   430769:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
   819379:  598:      return 3;
        -:  599:    case gold:
   612337:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
      401:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
    40401:  614:      return 4;
        -:  615:    case village:
    40401:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function play_adventurer called 0 returned 0% blocks executed 0%
    #####:  646:int play_adventurer(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[],int z) {
        -:  647:	int cardDrawn;
    #####:  648:	while (drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  649:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  650:			shuffle(currentPlayer, state);
call    0 never executed
        -:  651:		}
    #####:  652:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  654:		if (cardDrawn == copper && cardDrawn == silver && cardDrawn == gold)        // Error: instead of OR using and condition this will never evaluate to true.  
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  655:			drawntreasure++;
        -:  656:		else {
    #####:  657:			temphand[z] = cardDrawn;
    #####:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:			z++;
        -:  660:		}
        -:  661:	}
    #####:  662:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  664:		z = z - 1;
        -:  665:	}
    #####:  666:	return 0;
        -:  667:}
        -:  668:
        -:  669:
function play_smithy called 20200 returned 100% blocks executed 100%
    20200:  670:int play_smithy( int currentPlayer, struct gameState *state, int handPos) {
        -:  671:	//+3 Cards
   101000:  672:	for (int i = 0; i <= 3; i++)         // Error: Instead of 3 we are drawing 4 cards  due to <= condition.
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  673:	{
    80800:  674:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  675:	}
        -:  676:
        -:  677:	//discard card from hand
    20200:  678:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
    20200:  679:	return 0;
        -:  680:}
        -:  681:
function play_village called 47449 returned 100% blocks executed 100%
    47449:  682:int play_village(int currentPlayer, struct gameState *state,int handPos) {
        -:  683:	//+1 Card
    47449:  684:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  685:
        -:  686:	//+2 Actions
    47449:  687:	state->numActions = state->numActions + 2;
        -:  688:
        -:  689:	//discard played card from hand
    47449:  690:	discardCard(currentPlayer,handPos, state, 0); // Error: Both currentPlayer and handPos are of type integer it will cause problem during run-time.
call    0 returned 100%
    47449:  691:	return 0;
        -:  692:}
        -:  693:
function play_remodel called 0 returned 0% blocks executed 0%
    #####:  694:int play_remodel(int currentPlayer,  struct gameState *state , int handPos, int choice1, int choice2) {
    #####:  695:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  696:
    #####:  697:	if ((getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2)) // Error: > sign is replaced by < . It will cause incorrect behaviour.
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:		return -1;
        -:  700:	}
        -:  701:
    #####:  702:	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  703:
        -:  704:	//discard card from hand
    #####:  705:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  706:
        -:  707:	//discard trashed card
    #####:  708:	for (int i = 0; i <= state->handCount[currentPlayer]; i++)        //  Error: Invalid bounds i should be < instead of <= it will cause segmentation faults.
branch  0 never executed
branch  1 never executed
        -:  709:	{
    #####:  710:		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  711:		{
    #####:  712:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  713:			break;
        -:  714:		}
        -:  715:	}
        -:  716:
        -:  717:
    #####:  718:	return 0;
        -:  719:
        -:  720:}
        -:  721:
function play_councilroom called 200 returned 100% blocks executed 100%
      200:  722:int play_councilroom(int currentPlayer, struct gameState *state,int handPos) {
        -:  723:	//+4 Cards
     1000:  724:	for (int i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  725:	{
      800:  726:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  727:	}
        -:  728:
        -:  729:	//+1 Buy
      200:  730:	state->numBuys++;
        -:  731:
        -:  732:	//Each other player draws a card
      800:  733:	for (int i = 0; i <= state->numPlayers; i++)       // Error: <= used instead of <. incorrect bounds it can cause segmentation fault.
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  734:	{
      600:  735:		if (i != currentPlayer)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  736:		{
      400:  737:			drawCard(i, state);
call    0 returned 100%
        -:  738:		}
        -:  739:	}
        -:  740:
        -:  741:	//put played card in played card pile
      200:  742:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  743:
      200:  744:	return 0;
        -:  745:}
        -:  746:
function cardEffect called 67849 returned 100% blocks executed 4%
    67849:  747:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  748:{
        -:  749:  int i;
        -:  750:  int j;
        -:  751:  int k;
        -:  752:  int x;
        -:  753:  int index;
    67849:  754:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    67849:  755:  int nextPlayer = currentPlayer + 1;
        -:  756:
    67849:  757:  int tributeRevealedCards[2] = {-1, -1};
        -:  758:  int temphand[MAX_HAND];// moved above the if statement
    67849:  759:  int drawntreasure=0;
        -:  760:  //int cardDrawn;
    67849:  761:  int z = 0;// this is the counter for the temp hand
    67849:  762:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
    14739:  763:    nextPlayer = 0;
        -:  764:  }
        -:  765:  
        -:  766:  
        -:  767:  
        -:  768:	
        -:  769:  //uses switch to select card and perform actions
    67849:  770:  switch( card ) 
branch  0 taken 0%
branch  1 taken 1%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 30%
branch  7 taken 70%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  771:    {
        -:  772:    case adventurer:
        -:  773:      // call adventurer function here.
        -:  774:		
    #####:  775:		return play_adventurer(currentPlayer, state, drawntreasure, temphand, z);
call    0 never executed
        -:  776:
        -:  777:    case council_room:
      200:  778:		return play_councilroom(currentPlayer, state, handPos);
call    0 returned 100%
        -:  779:			
        -:  780:    case feast:
        -:  781:      //gain card with cost up to 5
        -:  782:      //Backup hand
    #####:  783:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  784:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  785:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  786:      }
        -:  787:      //Backup hand
        -:  788:
        -:  789:      //Update Coins for Buy
    #####:  790:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  791:      x = 1;//Condition to loop on
    #####:  792:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  793:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  794:	  if (DEBUG)
        -:  795:	    printf("None of that card left, sorry!\n");
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  799:	  }
        -:  800:	}
    #####:  801:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  802:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  806:	  }
        -:  807:	}
        -:  808:	else{
        -:  809:
        -:  810:	  if (DEBUG){
        -:  811:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  812:	  }
        -:  813:
    #####:  814:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  815:	  x = 0;//No more buying cards
        -:  816:
        -:  817:	  if (DEBUG){
        -:  818:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  819:	  }
        -:  820:
        -:  821:	}
        -:  822:      }     
        -:  823:
        -:  824:      //Reset Hand
    #####:  825:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  826:	state->hand[currentPlayer][i] = temphand[i];
    #####:  827:	temphand[i] = -1;
        -:  828:      }
        -:  829:      //Reset Hand
        -:  830:      			
    #####:  831:      return 0;
        -:  832:			
        -:  833:    case gardens:
    #####:  834:      return -1;
        -:  835:			
        -:  836:    case mine:
    #####:  837:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  838:
    #####:  839:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:		
    #####:  844:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  855:
        -:  856:      //discard card from hand
    #####:  857:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  858:
        -:  859:      //discard trashed card
    #####:  860:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  863:	    {
    #####:  864:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  865:	      break;
        -:  866:	    }
        -:  867:	}
        -:  868:			
    #####:  869:      return 0;
        -:  870:			
        -:  871:    case remodel:
        -:  872:		// call play_remodel function here.
    #####:  873:		return play_remodel(currentPlayer, state, handPos, choice1, choice2);
call    0 never executed
        -:  874:
        -:  875:    case smithy:
        -:  876:		// call play_smithy function here.
    20200:  877:		return play_smithy(currentPlayer, state, handPos);
call    0 returned 100%
        -:  878:		
        -:  879:    case village:
        -:  880:		// call play_village function here.
    47449:  881:		return play_village(currentPlayer, state, handPos);
call    0 returned 100%
        -:  882:		
        -:  883:		
        -:  884:    case baron:
    #####:  885:      state->numBuys++;//Increase buys by 1!
    #####:  886:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  887:	int p = 0;//Iterator for hand!
    #####:  888:	int card_not_discarded = 1;//Flag for discard set!
    #####:  889:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  890:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  891:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  892:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  893:	    state->discardCount[currentPlayer]++;
    #####:  894:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  895:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  896:	    }
    #####:  897:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  898:	    state->handCount[currentPlayer]--;
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
    #####:  901:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  902:	    if(DEBUG) {
        -:  903:	      printf("No estate cards in your hand, invalid choice\n");
        -:  904:	      printf("Must gain an estate if there are any\n");
        -:  905:	    }
    #####:  906:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  907:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  908:	      state->supplyCount[estate]--;//Decrement estates
    #####:  909:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  910:		isGameOver(state);
call    0 never executed
        -:  911:	      }
        -:  912:	    }
    #####:  913:	    card_not_discarded = 0;//Exit the loop
        -:  914:	  }
        -:  915:			    
        -:  916:	  else{
    #####:  917:	    p++;//Next card
        -:  918:	  }
        -:  919:	}
        -:  920:      }
        -:  921:			    
        -:  922:      else{
    #####:  923:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  925:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  926:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:	    isGameOver(state);
call    0 never executed
        -:  928:	  }
        -:  929:	}
        -:  930:      }
        -:  931:	    
        -:  932:      
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case great_hall:
        -:  936:      //+1 Card
    #####:  937:      drawCard(currentPlayer, state);
call    0 never executed
        -:  938:			
        -:  939:      //+1 Actions
    #####:  940:      state->numActions++;
        -:  941:			
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  987:			{
    #####:  988:			  drawCard(i, state);
call    0 never executed
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1002:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
        -: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1070:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
        -: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1154:			{
        -: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1215:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1216:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1217:	  state->discardCount[i]++;
    #####: 1218:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1219:	}
        -: 1220:      }
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
function discardCard called 67851 returned 100% blocks executed 100%
    67851: 1257:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1258:{
        -: 1259:	
        -: 1260:  //if card is not trashed, added to Played pile 
    67851: 1261:  if (trashFlag < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1262:    {
        -: 1263:      //add card to played pile
    67849: 1264:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    67849: 1265:      state->playedCardCount++;
        -: 1266:    }
        -: 1267:	
        -: 1268:  //set played card to -1
    67851: 1269:  state->hand[currentPlayer][handPos] = -1;
        -: 1270:	
        -: 1271:  //remove card from player's hand
    67851: 1272:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1273:    {
        -: 1274:      //reduce number of cards in hand
      999: 1275:      state->handCount[currentPlayer]--;
        -: 1276:    }
    66852: 1277:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
      862: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:  else 	
        -: 1283:    {
        -: 1284:      //replace discarded card with last card in hand
    65990: 1285:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1286:      //set last card to -1
    65990: 1287:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1288:      //reduce number of cards in hand
    65990: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:	
    67851: 1292:  return 0;
        -: 1293:}
        -: 1294:
function gainCard called 971841 returned 100% blocks executed 70%
   971841: 1295:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1296:{
        -: 1297:  //Note: supplyPos is enum of choosen card
        -: 1298:	
        -: 1299:  //check if supply pile is empty (0) or card is not used in game (-1)
   971841: 1300:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1301:    {
    #####: 1302:      return -1;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //added card for [whoseTurn] current player:
        -: 1306:  // toFlag = 0 : add to discard
        -: 1307:  // toFlag = 1 : add to deck
        -: 1308:  // toFlag = 2 : add to hand
        -: 1309:
   971841: 1310:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1311:    {
    #####: 1312:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1313:      state->deckCount[player]++;
        -: 1314:    }
   971841: 1315:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1316:    {
    #####: 1317:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1318:      state->handCount[player]++;
        -: 1319:    }
        -: 1320:  else
        -: 1321:    {
   971841: 1322:      state->discard[player][ state->discardCount[player] ] = supplyPos;
   971841: 1323:      state->discardCount[player]++;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //decrease number in supply pile
   971841: 1327:  state->supplyCount[supplyPos]--;
        -: 1328:	 
   971841: 1329:  return 0;
        -: 1330:}
        -: 1331:
function updateCoins called 1108068 returned 100% blocks executed 100%
  1108068: 1332:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1333:{
        -: 1334:  int i;
        -: 1335:	
        -: 1336:  //reset coin count
  1108068: 1337:  state->coins = 0;
        -: 1338:
        -: 1339:  //add coins for each Treasure card in player's hand
  6705969: 1340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1341:    {
  5597901: 1342:      if (state->hand[player][i] == copper)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -: 1343:	{
  2566904: 1344:	  state->coins += 1;
        -: 1345:	}
  3030997: 1346:      else if (state->hand[player][i] == silver)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -: 1347:	{
  1126726: 1348:	  state->coins += 2;
        -: 1349:	}
  1904271: 1350:      else if (state->hand[player][i] == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1351:	{
   485046: 1352:	  state->coins += 3;
        -: 1353:	}	
        -: 1354:    }	
        -: 1355:
        -: 1356:  //add bonus
  1108068: 1357:  state->coins += bonus;
        -: 1358:
  1108068: 1359:  return 0;
        -: 1360:}
        -: 1361:
        -: 1362:
        -: 1363://end of dominion.c
        -: 1364:
